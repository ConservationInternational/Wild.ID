package org.wildid.entity;
// Generated Sep 16, 2015 3:35:06 PM by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

/**
 * Person generated by hbm2java
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement
@Entity
@Table(name = "person", catalog = "wild_ID"
)
public class Person implements java.io.Serializable, Comparable {

    private Integer personId;
    private Country country;
    private Organization organization;
    private String firstName;
    private String lastName;
    private String address;
    private String address2;
    private String city;
    private String state;
    private String postalCode;
    private String phone;
    private String email;

    //@XmlTransient
    //private Set deploymentsForSetPersonId = new HashSet(0);
    @XmlTransient
    private Set<ProjectPersonRole> projectPersonRoles = new HashSet<ProjectPersonRole>(0);

    //@XmlTransient
    //private Set deploymentsForPickPersonId = new HashSet(0);
    //@XmlTransient
    //private Set images = new HashSet(0);
    //@XmlTransient
    //private Set imageSpecieses = new HashSet(0);
    //@XmlTransient
    //private Set projects = new HashSet(0);
    public Person() {
    }

    public Person(Country country, Organization organization, String firstName, String lastName, String address, String address2, String city, String state, String postalCode, String phone, String email, Set deploymentsForSetPersonId, Set projectPersonRoles, Set deploymentsForPickPersonId, Set images, Set imageSpecieses, Set projects) {
        this.country = country;
        this.organization = organization;
        this.firstName = firstName;
        this.lastName = lastName;
        this.address = address;
        this.address2 = address2;
        this.city = city;
        this.state = state;
        this.postalCode = postalCode;
        this.phone = phone;
        this.email = email;

        this.projectPersonRoles = projectPersonRoles;

        /*
         this.deploymentsForSetPersonId = deploymentsForSetPersonId;
         this.deploymentsForPickPersonId = deploymentsForPickPersonId;
         this.images = images;
         this.imageSpecieses = imageSpecieses;
         this.projects = projects;
         */
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "person_id", unique = true, nullable = false)
    public Integer getPersonId() {
        return this.personId;
    }

    public void setPersonId(Integer personId) {
        this.personId = personId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "country_id")
    public Country getCountry() {
        return this.country;
    }

    public void setCountry(Country country) {
        this.country = country;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "organization_id")
    public Organization getOrganization() {
        return this.organization;
    }

    public void setOrganization(Organization organization) {
        this.organization = organization;
    }

    @Column(name = "first_name", length = 50)
    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Column(name = "last_name", length = 50)
    public String getLastName() {
        return this.lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Column(name = "address")
    public String getAddress() {
        return this.address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    @Column(name = "address2")
    public String getAddress2() {
        return this.address2;
    }

    public void setAddress2(String address2) {
        this.address2 = address2;
    }

    @Column(name = "city")
    public String getCity() {
        return this.city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    @Column(name = "state", length = 16)
    public String getState() {
        return this.state;
    }

    public void setState(String state) {
        this.state = state;
    }

    @Column(name = "postal_code", length = 16)
    public String getPostalCode() {
        return this.postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    @Column(name = "phone", length = 32)
    public String getPhone() {
        return this.phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    @Column(name = "email", length = 64)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    /*
     @OneToMany(fetch = FetchType.LAZY, mappedBy = "personBySetPersonId")
     public Set getDeploymentsForSetPersonId() {
     return this.deploymentsForSetPersonId;
     }

     public void setDeploymentsForSetPersonId(Set deploymentsForSetPersonId) {
     this.deploymentsForSetPersonId = deploymentsForSetPersonId;
     }
     */
    @OneToMany(fetch = FetchType.EAGER, mappedBy = "person")
    public Set<ProjectPersonRole> getProjectPersonRoles() {
        return this.projectPersonRoles;
    }

    public void setProjectPersonRoles(Set<ProjectPersonRole> projectPersonRoles) {
        this.projectPersonRoles = projectPersonRoles;
    }

    /*
     @OneToMany(fetch = FetchType.LAZY, mappedBy = "personByPickPersonId")
     public Set getDeploymentsForPickPersonId() {
     return this.deploymentsForPickPersonId;
     }

     public void setDeploymentsForPickPersonId(Set deploymentsForPickPersonId) {
     this.deploymentsForPickPersonId = deploymentsForPickPersonId;
     }

     @OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
     public Set getImages() {
     return this.images;
     }

     public void setImages(Set images) {
     this.images = images;
     }

     @OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
     public Set getImageSpecieses() {
     return this.imageSpecieses;
     }

     public void setImageSpecieses(Set imageSpecieses) {
     this.imageSpecieses = imageSpecieses;
     }

     @OneToMany(fetch = FetchType.LAZY, mappedBy = "person")
     public Set getProjects() {
     return this.projects;
     }

     public void setProjects(Set projects) {
     this.projects = projects;
     }
     */
    @Override
    public int compareTo(Object o) {
        if (o instanceof Person) {
            Person p = (Person) o;
            String thisName = this.lastName + " " + this.firstName;
            String thatName = p.getLastName() + " " + p.getFirstName();
            return thisName.compareTo(thatName);
        } else {
            return 0;
        }
    }

}
